policy_module(auoms,1.0);

####
# microsoft-oms-auditd-plugin
#
# Copyright (c) Microsoft Corporation
#
# All rights reserved. 
#
# MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
####

#
# This policy file was developed for CentOS/RHEL 6 & 7.
# It will not work on CentOS/RHEL 5, it may not work on CentOS/RHEL 6.
# It requires the "open" operation and the "passwd_file_t" type.
#

require {
        type audisp_t;
        type lib_t;
        type ld_so_t;
        type devlog_t;
        type ld_so_cache_t;
        type fs_t;
        type etc_t;
        type syslogd_t;
        type restorecon_t;
        type passwd_file_t;
        type tmp_t;
        type locale_t;
        type rpm_t;
        type setfiles_t;
        type kernel_t;
        type unconfined_t;
        type unconfined_service_t;
        role system_r;
        class fd use;
        class file { open create ioctl read getattr lock write setattr append link unlink rename execute relabelto relabelfrom };
        class lnk_file { open read };
        class filesystem associate;
        class sock_file { open write create getattr setattr };
        class unix_dgram_socket { create connect write sendto };
        class unix_stream_socket connectto;
        class process { signal transition noatsecure sigkill sigstop signull sigchld siginh rlimitinh };
        class dir { open read getattr lock search ioctl add_name remove_name write relabelto };
}


type auoms_t;
type auoms_var_t;
type auoms_sock_var_t;
type auoms_exec_t;

#============= audisp_t ==============
logging_dispatcher_domain(auoms_t,auoms_exec_t);
allow audisp_t auoms_exec_t:file open;

#============= auoms_sock_var_t ==============
allow auoms_sock_var_t fs_t:filesystem associate;


#============= auoms_var_t ==============
allow auoms_var_t fs_t:filesystem associate;

#============= auoms_t ==============
allow auoms_t auoms_var_t:dir { open read getattr lock search ioctl add_name remove_name write };
allow auoms_t auoms_var_t:file { open create ioctl read getattr lock write setattr append link unlink rename };

allow auoms_t auoms_sock_var_t:unix_stream_socket connectto;
allow auoms_t auoms_sock_var_t:dir { open read getattr search };
allow auoms_t auoms_sock_var_t:sock_file write;

allow auoms_t etc_t:dir { open read getattr search };
allow auoms_t etc_t:file { open read getattr };
allow auoms_t passwd_file_t:file { open getattr read };

allow auoms_t locale_t:file { open read getattr };
allow auoms_t self:unix_dgram_socket { create connect write };
allow auoms_t syslogd_t:unix_dgram_socket sendto;
allow auoms_t kernel_t:unix_dgram_socket sendto;
allow auoms_t tmp_t:dir search;
allow auoms_t tmp_t:sock_file write;
allow auoms_t unconfined_t:unix_stream_socket connectto;

allow auoms_t devlog_t:sock_file write;
allow auoms_t ld_so_cache_t:file { open read getattr };
allow auoms_t ld_so_t:file { open read };
allow auoms_t lib_t:dir search;
allow auoms_t lib_t:file { open read getattr execute };
allow auoms_t lib_t:lnk_file {open  read };

#============= restorecon_t ==============
allow restorecon_t auoms_sock_var_t:dir { open read getattr search relabelto };
allow restorecon_t auoms_sock_var_t:file { getattr relabelto };
allow restorecon_t auoms_var_t:dir { open read getattr search relabelto };
allow restorecon_t auoms_var_t:file { getattr relabelto };

#============= setfiles_t ==============
allow setfiles_t auoms_sock_var_t:dir search;
allow setfiles_t auoms_var_t:dir search;

#============= rpm_t ==============
allow rpm_t auoms_sock_var_t:dir { open getattr rmdir };
allow rpm_t auoms_sock_var_t:sock_file { getattr setattr unlink };
allow rpm_t auoms_var_t:dir { open read write getattr search remove_name rmdir };
allow rpm_t auoms_var_t:file { read getattr unlink };

#============= unconfined_t ==============
allow unconfined_t auoms_var_t:dir { open read write getattr search remove_name rmdir };
allow unconfined_t auoms_var_t:file { open read getattr unlink };
allow unconfined_t auoms_sock_var_t:dir { open write read getattr search add_name remove_name rmdir };
allow unconfined_t auoms_sock_var_t:sock_file { open create getattr setattr unlink };

#============= unconfined_service_t ==============
allow unconfined_service_t auoms_sock_var_t:dir { add_name getattr search remove_name write };
allow unconfined_service_t auoms_sock_var_t:sock_file { create getattr unlink };
