/*
    microsoft-oms-auditd-plugin

    Copyright (c) Microsoft Corporation

    All rights reserved.

    MIT License

    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the ""Software""), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED *AS IS*, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

#include "LookupTables.h"

#include <algorithm>
#include <fcntl.h>

std::unordered_map<std::string, RecordType> LookupTables::s_record_type_name_to_code = {
	{"GET",RecordType::GET},
	{"SET",RecordType::SET},
	{"LIST",RecordType::LIST},
	{"ADD",RecordType::ADD},
	{"DEL",RecordType::DEL},
	{"USER",RecordType::USER},
	{"LOGIN",RecordType::LOGIN},
	{"WATCH_INS",RecordType::WATCH_INS},
	{"WATCH_REM",RecordType::WATCH_REM},
	{"WATCH_LIST",RecordType::WATCH_LIST},
	{"SIGNAL_INFO",RecordType::SIGNAL_INFO},
	{"ADD_RULE",RecordType::ADD_RULE},
	{"DEL_RULE",RecordType::DEL_RULE},
	{"LIST_RULES",RecordType::LIST_RULES},
	{"TRIM",RecordType::TRIM},
	{"MAKE_EQUIV",RecordType::MAKE_EQUIV},
	{"TTY_GET",RecordType::TTY_GET},
	{"TTY_SET",RecordType::TTY_SET},
	{"SET_FEATURE",RecordType::SET_FEATURE},
	{"GET_FEATURE",RecordType::GET_FEATURE},
	{"USER_AUTH",RecordType::USER_AUTH},
	{"USER_ACCT",RecordType::USER_ACCT},
	{"USER_MGMT",RecordType::USER_MGMT},
	{"CRED_ACQ",RecordType::CRED_ACQ},
	{"CRED_DISP",RecordType::CRED_DISP},
	{"USER_START",RecordType::USER_START},
	{"USER_END",RecordType::USER_END},
	{"USER_AVC",RecordType::USER_AVC},
	{"USER_CHAUTHTOK",RecordType::USER_CHAUTHTOK},
	{"USER_ERR",RecordType::USER_ERR},
	{"CRED_REFR",RecordType::CRED_REFR},
	{"USYS_CONFIG",RecordType::USYS_CONFIG},
	{"USER_LOGIN",RecordType::USER_LOGIN},
	{"USER_LOGOUT",RecordType::USER_LOGOUT},
	{"ADD_USER",RecordType::ADD_USER},
	{"DEL_USER",RecordType::DEL_USER},
	{"ADD_GROUP",RecordType::ADD_GROUP},
	{"DEL_GROUP",RecordType::DEL_GROUP},
	{"DAC_CHECK",RecordType::DAC_CHECK},
	{"CHGRP_ID",RecordType::CHGRP_ID},
	{"TEST",RecordType::TEST},
	{"TRUSTED_APP",RecordType::TRUSTED_APP},
	{"USER_SELINUX_ERR",RecordType::USER_SELINUX_ERR},
	{"USER_CMD",RecordType::USER_CMD},
	{"USER_TTY",RecordType::USER_TTY},
	{"CHUSER_ID",RecordType::CHUSER_ID},
	{"GRP_AUTH",RecordType::GRP_AUTH},
	{"SYSTEM_BOOT",RecordType::SYSTEM_BOOT},
	{"SYSTEM_SHUTDOWN",RecordType::SYSTEM_SHUTDOWN},
	{"SYSTEM_RUNLEVEL",RecordType::SYSTEM_RUNLEVEL},
	{"SERVICE_START",RecordType::SERVICE_START},
	{"SERVICE_STOP",RecordType::SERVICE_STOP},
	{"GRP_MGMT",RecordType::GRP_MGMT},
	{"GRP_CHAUTHTOK",RecordType::GRP_CHAUTHTOK},
	{"MAC_CHECK",RecordType::MAC_CHECK},
	{"ACCT_LOCK",RecordType::ACCT_LOCK},
	{"ACCT_UNLOCK",RecordType::ACCT_UNLOCK},
	{"DAEMON_START",RecordType::DAEMON_START},
	{"DAEMON_END",RecordType::DAEMON_END},
	{"DAEMON_ABORT",RecordType::DAEMON_ABORT},
	{"DAEMON_CONFIG",RecordType::DAEMON_CONFIG},
	{"DAEMON_RECONFIG",RecordType::DAEMON_RECONFIG},
	{"DAEMON_ROTATE",RecordType::DAEMON_ROTATE},
	{"DAEMON_RESUME",RecordType::DAEMON_RESUME},
	{"DAEMON_ACCEPT",RecordType::DAEMON_ACCEPT},
	{"DAEMON_CLOSE",RecordType::DAEMON_CLOSE},
	{"DAEMON_ERR",RecordType::DAEMON_ERR},
	{"SYSCALL",RecordType::SYSCALL},
	{"PATH",RecordType::PATH},
	{"IPC",RecordType::IPC},
	{"SOCKETCALL",RecordType::SOCKETCALL},
	{"CONFIG_CHANGE",RecordType::CONFIG_CHANGE},
	{"SOCKADDR",RecordType::SOCKADDR},
	{"CWD",RecordType::CWD},
	{"EXECVE",RecordType::EXECVE},
	{"IPC_SET_PERM",RecordType::IPC_SET_PERM},
	{"MQ_OPEN",RecordType::MQ_OPEN},
	{"MQ_SENDRECV",RecordType::MQ_SENDRECV},
	{"MQ_NOTIFY",RecordType::MQ_NOTIFY},
	{"MQ_GETSETATTR",RecordType::MQ_GETSETATTR},
	{"KERNEL_OTHER",RecordType::KERNEL_OTHER},
	{"FD_PAIR",RecordType::FD_PAIR},
	{"OBJ_PID",RecordType::OBJ_PID},
	{"TTY",RecordType::TTY},
	{"EOE",RecordType::EOE},
	{"BPRM_FCAPS",RecordType::BPRM_FCAPS},
	{"CAPSET",RecordType::CAPSET},
	{"MMAP",RecordType::MMAP},
	{"NETFILTER_PKT",RecordType::NETFILTER_PKT},
	{"NETFILTER_CFG",RecordType::NETFILTER_CFG},
	{"SECCOMP",RecordType::SECCOMP},
	{"PROCTITLE",RecordType::PROCTITLE},
	{"FEATURE_CHANGE",RecordType::FEATURE_CHANGE},
	{"REPLACE",RecordType::REPLACE},
	{"KERN_MODULE",RecordType::KERN_MODULE},
	{"FANOTIFY",RecordType::FANOTIFY},
	{"AVC",RecordType::AVC},
	{"SELINUX_ERR",RecordType::SELINUX_ERR},
	{"AVC_PATH",RecordType::AVC_PATH},
	{"MAC_POLICY_LOAD",RecordType::MAC_POLICY_LOAD},
	{"MAC_STATUS",RecordType::MAC_STATUS},
	{"MAC_CONFIG_CHANGE",RecordType::MAC_CONFIG_CHANGE},
	{"MAC_UNLBL_ALLOW",RecordType::MAC_UNLBL_ALLOW},
	{"MAC_CIPSOV4_ADD",RecordType::MAC_CIPSOV4_ADD},
	{"MAC_CIPSOV4_DEL",RecordType::MAC_CIPSOV4_DEL},
	{"MAC_MAP_ADD",RecordType::MAC_MAP_ADD},
	{"MAC_MAP_DEL",RecordType::MAC_MAP_DEL},
	{"MAC_IPSEC_ADDSA",RecordType::MAC_IPSEC_ADDSA},
	{"MAC_IPSEC_DELSA",RecordType::MAC_IPSEC_DELSA},
	{"MAC_IPSEC_ADDSPD",RecordType::MAC_IPSEC_ADDSPD},
	{"MAC_IPSEC_DELSPD",RecordType::MAC_IPSEC_DELSPD},
	{"MAC_IPSEC_EVENT",RecordType::MAC_IPSEC_EVENT},
	{"MAC_UNLBL_STCADD",RecordType::MAC_UNLBL_STCADD},
	{"MAC_UNLBL_STCDEL",RecordType::MAC_UNLBL_STCDEL},
	{"MAC_CALIPSO_ADD",RecordType::MAC_CALIPSO_ADD},
	{"MAC_CALIPSO_DEL",RecordType::MAC_CALIPSO_DEL},
	{"AA",RecordType::AA},
	{"APPARMOR_AUDIT",RecordType::APPARMOR_AUDIT},
	{"APPARMOR_ALLOWED",RecordType::APPARMOR_ALLOWED},
	{"APPARMOR_DENIED",RecordType::APPARMOR_DENIED},
	{"APPARMOR_HINT",RecordType::APPARMOR_HINT},
	{"APPARMOR_STATUS",RecordType::APPARMOR_STATUS},
	{"APPARMOR_ERROR",RecordType::APPARMOR_ERROR},
	{"ANOM_PROMISCUOUS",RecordType::ANOM_PROMISCUOUS},
	{"ANOM_LINK",RecordType::ANOM_LINK},
	{"INTEGRITY_FIRST_MSG",RecordType::INTEGRITY_FIRST_MSG},
	{"INTEGRITY_LAST_MSG",RecordType::INTEGRITY_LAST_MSG},
	{"INTEGRITY_DATA",RecordType::INTEGRITY_DATA},
	{"INTEGRITY_METADATA",RecordType::INTEGRITY_METADATA},
	{"INTEGRITY_STATUS",RecordType::INTEGRITY_STATUS},
	{"INTEGRITY_HASH",RecordType::INTEGRITY_HASH},
	{"INTEGRITY_PCR",RecordType::INTEGRITY_PCR},
	{"INTEGRITY_RULE",RecordType::INTEGRITY_RULE},
	{"ANOM_LOGIN_FAILURES",RecordType::ANOM_LOGIN_FAILURES},
	{"ANOM_LOGIN_TIME",RecordType::ANOM_LOGIN_TIME},
	{"ANOM_LOGIN_SESSIONS",RecordType::ANOM_LOGIN_SESSIONS},
	{"ANOM_LOGIN_ACCT",RecordType::ANOM_LOGIN_ACCT},
	{"ANOM_LOGIN_LOCATION",RecordType::ANOM_LOGIN_LOCATION},
	{"ANOM_MAX_DAC",RecordType::ANOM_MAX_DAC},
	{"ANOM_MAX_MAC",RecordType::ANOM_MAX_MAC},
	{"ANOM_AMTU_FAIL",RecordType::ANOM_AMTU_FAIL},
	{"ANOM_RBAC_FAIL",RecordType::ANOM_RBAC_FAIL},
	{"ANOM_RBAC_INTEGRITY_FAIL",RecordType::ANOM_RBAC_INTEGRITY_FAIL},
	{"ANOM_CRYPTO_FAIL",RecordType::ANOM_CRYPTO_FAIL},
	{"ANOM_ACCESS_FS",RecordType::ANOM_ACCESS_FS},
	{"ANOM_EXEC",RecordType::ANOM_EXEC},
	{"ANOM_MK_EXEC",RecordType::ANOM_MK_EXEC},
	{"ANOM_ADD_ACCT",RecordType::ANOM_ADD_ACCT},
	{"ANOM_DEL_ACCT",RecordType::ANOM_DEL_ACCT},
	{"ANOM_MOD_ACCT",RecordType::ANOM_MOD_ACCT},
	{"ANOM_ROOT_TRANS",RecordType::ANOM_ROOT_TRANS},
	{"RESP_ANOMALY",RecordType::RESP_ANOMALY},
	{"RESP_ALERT",RecordType::RESP_ALERT},
	{"RESP_KILL_PROC",RecordType::RESP_KILL_PROC},
	{"RESP_TERM_ACCESS",RecordType::RESP_TERM_ACCESS},
	{"RESP_ACCT_REMOTE",RecordType::RESP_ACCT_REMOTE},
	{"RESP_ACCT_LOCK_TIMED",RecordType::RESP_ACCT_LOCK_TIMED},
	{"RESP_ACCT_UNLOCK_TIMED",RecordType::RESP_ACCT_UNLOCK_TIMED},
	{"RESP_ACCT_LOCK",RecordType::RESP_ACCT_LOCK},
	{"RESP_TERM_LOCK",RecordType::RESP_TERM_LOCK},
	{"RESP_SEBOOL",RecordType::RESP_SEBOOL},
	{"RESP_EXEC",RecordType::RESP_EXEC},
	{"RESP_SINGLE",RecordType::RESP_SINGLE},
	{"RESP_HALT",RecordType::RESP_HALT},
	{"USER_ROLE_CHANGE",RecordType::USER_ROLE_CHANGE},
	{"ROLE_ASSIGN",RecordType::ROLE_ASSIGN},
	{"ROLE_REMOVE",RecordType::ROLE_REMOVE},
	{"LABEL_OVERRIDE",RecordType::LABEL_OVERRIDE},
	{"LABEL_LEVEL_CHANGE",RecordType::LABEL_LEVEL_CHANGE},
	{"USER_LABELED_EXPORT",RecordType::USER_LABELED_EXPORT},
	{"USER_UNLABELED_EXPORT",RecordType::USER_UNLABELED_EXPORT},
	{"DEV_ALLOC",RecordType::DEV_ALLOC},
	{"DEV_DEALLOC",RecordType::DEV_DEALLOC},
	{"FS_RELABEL",RecordType::FS_RELABEL},
	{"USER_MAC_POLICY_LOAD",RecordType::USER_MAC_POLICY_LOAD},
	{"ROLE_MODIFY",RecordType::ROLE_MODIFY},
	{"USER_MAC_CONFIG_CHANGE",RecordType::USER_MAC_CONFIG_CHANGE},
	{"CRYPTO_TEST_USER",RecordType::CRYPTO_TEST_USER},
	{"CRYPTO_PARAM_CHANGE_USER",RecordType::CRYPTO_PARAM_CHANGE_USER},
	{"CRYPTO_LOGIN",RecordType::CRYPTO_LOGIN},
	{"CRYPTO_LOGOUT",RecordType::CRYPTO_LOGOUT},
	{"CRYPTO_KEY_USER",RecordType::CRYPTO_KEY_USER},
	{"CRYPTO_FAILURE_USER",RecordType::CRYPTO_FAILURE_USER},
	{"CRYPTO_REPLAY_USER",RecordType::CRYPTO_REPLAY_USER},
	{"CRYPTO_SESSION",RecordType::CRYPTO_SESSION},
	{"CRYPTO_IKE_SA",RecordType::CRYPTO_IKE_SA},
	{"CRYPTO_IPSEC_SA",RecordType::CRYPTO_IPSEC_SA},
	{"VIRT_CONTROL",RecordType::VIRT_CONTROL},
	{"VIRT_RESOURCE",RecordType::VIRT_RESOURCE},
	{"VIRT_MACHINE_ID",RecordType::VIRT_MACHINE_ID},
	{"VIRT_INTEGRITY_CHECK",RecordType::VIRT_INTEGRITY_CHECK},
	{"VIRT_CREATE",RecordType::VIRT_CREATE},
	{"VIRT_DESTROY",RecordType::VIRT_DESTROY},
	{"VIRT_MIGRATE_IN",RecordType::VIRT_MIGRATE_IN},
	{"VIRT_MIGRATE_OUT",RecordType::VIRT_MIGRATE_OUT},
	{"VIRT_MIGRATE_OUT",RecordType::VIRT_MIGRATE_OUT},
	{"AUOMS_PROCESS_INVENTORY", RecordType::AUOMS_PROCESS_INVENTORY},
	{"AUOMS_DROPPED_RECORDS", RecordType::AUOMS_DROPPED_RECORDS},
	{"AUOMS_SYSCALL_METRICS", RecordType::AUOMS_SYSCALL_METRICS},
	{"AUOMS_FRAGMENT", RecordType::AUOMS_FRAGMENT},
	{"AUOMS_SYSCALL", RecordType::AUOMS_SYSCALL},
	{"AUOMS_CONNECT", RecordType::AUOMS_CONNECT},
};

std::unordered_map<std::string, field_type_t> LookupTables::s_field_name_to_type = {
	{"auid", field_type_t::UID},
	{"uid", field_type_t::UID},
	{"euid", field_type_t::UID},
	{"suid", field_type_t::UID},
	{"fsuid", field_type_t::UID},
	{"ouid", field_type_t::UID},
	{"oauid", field_type_t::UID},
	{"old-auid", field_type_t::UID},
	{"iuid", field_type_t::UID},
	{"id", field_type_t::UID},
	{"inode_uid", field_type_t::UID},
	{"sauid", field_type_t::UID},
	{"obj_uid", field_type_t::UID},
	{"obj_gid", field_type_t::GID},
	{"gid", field_type_t::GID},
	{"egid", field_type_t::GID},
	{"sgid", field_type_t::GID},
	{"fsgid", field_type_t::GID},
	{"ogid", field_type_t::GID},
	{"igid", field_type_t::GID},
	{"inode_gid", field_type_t::GID},
	{"new_gid", field_type_t::GID},
	{"syscall", field_type_t::SYSCALL},
	{"arch", field_type_t::ARCH},
	{"exit", field_type_t::EXIT},
	{"path", field_type_t::ESCAPED},
	{"comm", field_type_t::ESCAPED},
	{"exe", field_type_t::ESCAPED},
	{"file", field_type_t::ESCAPED},
	{"name", field_type_t::ESCAPED},
	{"watch", field_type_t::ESCAPED},
	{"cwd", field_type_t::ESCAPED},
	{"cmd", field_type_t::ESCAPED},
	{"acct", field_type_t::ESCAPED},
	{"dir", field_type_t::ESCAPED},
	{"key", field_type_t::ESCAPED_KEY},
	{"vm", field_type_t::ESCAPED},
	{"old-chardev", field_type_t::ESCAPED},
	{"new-chardev", field_type_t::ESCAPED},
	{"old-disk", field_type_t::ESCAPED},
	{"new-disk", field_type_t::ESCAPED},
	{"old-fs", field_type_t::ESCAPED},
	{"new-fs", field_type_t::ESCAPED},
	{"old-net", field_type_t::ESCAPED},
	{"new-net", field_type_t::ESCAPED},
	{"device", field_type_t::ESCAPED},
	{"cgroup", field_type_t::ESCAPED},
	{"perm", field_type_t::PERM},
	{"perm_mask", field_type_t::PERM},
	{"mode", field_type_t::MODE},
	{"saddr", field_type_t::SOCKADDR},
	{"prom", field_type_t::PROMISC},
	{"old_prom", field_type_t::PROMISC},
	{"capability", field_type_t::CAPABILITY},
	{"res", field_type_t::SUCCESS},
	{"result", field_type_t::SUCCESS},
	{"a0", field_type_t::A0},
	{"a1", field_type_t::A1},
	{"a2", field_type_t::A2},
	{"a3", field_type_t::A3},
	{"sig", field_type_t::SIGNAL},
	{"list", field_type_t::LIST},
	{"data", field_type_t::TTY_DATA},
	{"ses", field_type_t::SESSION},
	{"cap_pi", field_type_t::CAP_BITMAP},
	{"cap_pe", field_type_t::CAP_BITMAP},
	{"cap_pp", field_type_t::CAP_BITMAP},
	{"cap_fi", field_type_t::CAP_BITMAP},
	{"cap_fp", field_type_t::CAP_BITMAP},
	{"fp", field_type_t::CAP_BITMAP},
	{"fi", field_type_t::CAP_BITMAP},
	{"fe", field_type_t::CAP_BITMAP},
	{"old_pp", field_type_t::CAP_BITMAP},
	{"old_pi", field_type_t::CAP_BITMAP},
	{"old_pe", field_type_t::CAP_BITMAP},
	{"new_pp", field_type_t::CAP_BITMAP},
	{"new_pi", field_type_t::CAP_BITMAP},
	{"new_pe", field_type_t::CAP_BITMAP},
	{"family", field_type_t::NFPROTO},
	{"icmptype", field_type_t::ICMPTYPE},
	{"proto", field_type_t::PROTOCOL},
	{"addr", field_type_t::ADDR},
	{"apparmor", field_type_t::ESCAPED},
	{"operation", field_type_t::ESCAPED},
	{"denied_mask", field_type_t::ESCAPED},
	{"info", field_type_t::ESCAPED},
	{"profile", field_type_t::ESCAPED},
	{"requested_mask", field_type_t::ESCAPED},
	{"per", field_type_t::PERSONALITY},
	{"code", field_type_t::SECCOMP},
	{"old-rng", field_type_t::ESCAPED},
	{"new-rng", field_type_t::ESCAPED},
	{"oflag", field_type_t::OFLAG},
	{"ocomm", field_type_t::ESCAPED},
	{"flags", field_type_t::MMAP},
	{"sigev_signo", field_type_t::SIGNAL},
	{"subj", field_type_t::MAC_LABEL},
	{"obj", field_type_t::MAC_LABEL},
	{"scontext", field_type_t::MAC_LABEL},
	{"tcontext", field_type_t::MAC_LABEL},
	{"vm-ctx", field_type_t::MAC_LABEL},
	{"img-ctx", field_type_t::MAC_LABEL},
	{"proctitle", field_type_t::PROCTITLE},
	{"grp", field_type_t::ESCAPED},
	{"new_group", field_type_t::ESCAPED},
	{"hook", field_type_t::HOOK},
	{"action", field_type_t::NETACTION},
	{"macproto", field_type_t::MACPROTO},
	{"invalid_context", field_type_t::ESCAPED},
	{"ioctlcmd", field_type_t::IOCTL_REQ},
};

std::vector<std::string> LookupTables::s_record_type_code_to_name = std::vector<std::string>(static_cast<size_t>(RecordType::LAST_AUOMS_MSG), "");

std::unordered_map<ArchType, MachineType> LookupTables::s_arch_to_machine = {
		{ArchType::I386, MachineType::X86},
		{ArchType::X86_64, MachineType::X86_64},
};

std::unordered_map<std::string, ArchType> LookupTables::s_arch_name_to_type = {
		{"i386", ArchType::I386},
		{"i486", ArchType::I386},
		{"i586", ArchType::I386},
		{"i686", ArchType::I386},
		{"x86_64", ArchType::X86_64},
};

std::vector<std::string> LookupTables::s_machine_to_name = {
		"i386",
		"x86_64",
};

std::vector<std::vector<std::string>> LookupTables::s_syscall_lookup;

std::vector<std::pair<unsigned int,std::string>> s_i386_syscall_name_to_num = {
	{0, "restart_syscall"},
	{1, "exit"},
	{2, "fork"},
	{3, "read"},
	{4, "write"},
	{5, "open"},
	{6, "close"},
	{7, "waitpid"},
	{8, "creat"},
	{9, "link"},
	{10, "unlink"},
	{11, "execve"},
	{12, "chdir"},
	{13, "time"},
	{14, "mknod"},
	{15, "chmod"},
	{16, "lchown"},
	{17, "break"},
	{18, "oldstat"},
	{19, "lseek"},
	{20, "getpid"},
	{21, "mount"},
	{22, "umount"},
	{23, "setuid"},
	{24, "getuid"},
	{25, "stime"},
	{26, "ptrace"},
	{27, "alarm"},
	{28, "oldfstat"},
	{29, "pause"},
	{30, "utime"},
	{31, "stty"},
	{32, "gtty"},
	{33, "access"},
	{34, "nice"},
	{35, "ftime"},
	{36, "sync"},
	{37, "kill"},
	{38, "rename"},
	{39, "mkdir"},
	{40, "rmdir"},
	{41, "dup"},
	{42, "pipe"},
	{43, "times"},
	{44, "prof"},
	{45, "brk"},
	{46, "setgid"},
	{47, "getgid"},
	{48, "signal"},
	{49, "geteuid"},
	{50, "getegid"},
	{51, "acct"},
	{52, "umount2"},
	{53, "lock"},
	{54, "ioctl"},
	{55, "fcntl"},
	{56, "mpx"},
	{57, "setpgid"},
	{58, "ulimit"},
	{59, "oldolduname"},
	{60, "umask"},
	{61, "chroot"},
	{62, "ustat"},
	{63, "dup2"},
	{64, "getppid"},
	{65, "getpgrp"},
	{66, "setsid"},
	{67, "sigaction"},
	{68, "sgetmask"},
	{69, "ssetmask"},
	{70, "setreuid"},
	{71, "setregid"},
	{72, "sigsuspend"},
	{73, "sigpending"},
	{74, "sethostname"},
	{75, "setrlimit"},
	{76, "getrlimit"},
	{77, "getrusage"},
	{78, "gettimeofday"},
	{79, "settimeofday"},
	{80, "getgroups"},
	{81, "setgroups"},
	{82, "select"},
	{83, "symlink"},
	{84, "oldlstat"},
	{85, "readlink"},
	{86, "uselib"},
	{87, "swapon"},
	{88, "reboot"},
	{89, "readdir"},
	{90, "mmap"},
	{91, "munmap"},
	{92, "truncate"},
	{93, "ftruncate"},
	{94, "fchmod"},
	{95, "fchown"},
	{96, "getpriority"},
	{97, "setpriority"},
	{98, "profil"},
	{99, "statfs"},
	{100, "fstatfs"},
	{101, "ioperm"},
	{102, "socketcall"},
	{103, "syslog"},
	{104, "setitimer"},
	{105, "getitimer"},
	{106, "stat"},
	{107, "lstat"},
	{108, "fstat"},
	{109, "olduname"},
	{110, "iopl"},
	{111, "vhangup"},
	{112, "idle"},
	{113, "vm86old"},
	{114, "wait4"},
	{115, "swapoff"},
	{116, "sysinfo"},
	{117, "ipc"},
	{118, "fsync"},
	{119, "sigreturn"},
	{120, "clone"},
	{121, "setdomainname"},
	{122, "uname"},
	{123, "modify_ldt"},
	{124, "adjtimex"},
	{125, "mprotect"},
	{126, "sigprocmask"},
	{127, "create_module"},
	{128, "init_module"},
	{129, "delete_module"},
	{130, "get_kernel_syms"},
	{131, "quotactl"},
	{132, "getpgid"},
	{133, "fchdir"},
	{134, "bdflush"},
	{135, "sysfs"},
	{136, "personality"},
	{137, "afs_syscall"},
	{138, "setfsuid"},
	{139, "setfsgid"},
	{140, "_llseek"},
	{141, "getdents"},
	{142, "_newselect"},
	{143, "flock"},
	{144, "msync"},
	{145, "readv"},
	{146, "writev"},
	{147, "getsid"},
	{148, "fdatasync"},
	{149, "_sysctl"},
	{150, "mlock"},
	{151, "munlock"},
	{152, "mlockall"},
	{153, "munlockall"},
	{154, "sched_setparam"},
	{155, "sched_getparam"},
	{156, "sched_setscheduler"},
	{157, "sched_getscheduler"},
	{158, "sched_yield"},
	{159, "sched_get_priority_max"},
	{160, "sched_get_priority_min"},
	{161, "sched_rr_get_interval"},
	{162, "nanosleep"},
	{163, "mremap"},
	{164, "setresuid"},
	{165, "getresuid"},
	{166, "vm86"},
	{167, "query_module"},
	{168, "poll"},
	{169, "nfsservctl"},
	{170, "setresgid"},
	{171, "getresgid"},
	{172, "prctl"},
	{173, "rt_sigreturn"},
	{174, "rt_sigaction"},
	{175, "rt_sigprocmask"},
	{176, "rt_sigpending"},
	{177, "rt_sigtimedwait"},
	{178, "rt_sigqueueinfo"},
	{179, "rt_sigsuspend"},
	{180, "pread64"},
	{181, "pwrite64"},
	{182, "chown"},
	{183, "getcwd"},
	{184, "capget"},
	{185, "capset"},
	{186, "sigaltstack"},
	{187, "sendfile"},
	{188, "getpmsg"},
	{189, "putpmsg"},
	{190, "vfork"},
	{191, "ugetrlimit"},
	{192, "mmap2"},
	{193, "truncate64"},
	{194, "ftruncate64"},
	{195, "stat64"},
	{196, "lstat64"},
	{197, "fstat64"},
	{198, "lchown32"},
	{199, "getuid32"},
	{200, "getgid32"},
	{201, "geteuid32"},
	{202, "getegid32"},
	{203, "setreuid32"},
	{204, "setregid32"},
	{205, "getgroups32"},
	{206, "setgroups32"},
	{207, "fchown32"},
	{208, "setresuid32"},
	{209, "getresuid32"},
	{210, "setresgid32"},
	{211, "getresgid32"},
	{212, "chown32"},
	{213, "setuid32"},
	{214, "setgid32"},
	{215, "setfsuid32"},
	{216, "setfsgid32"},
	{217, "pivot_root"},
	{218, "mincore"},
	{219, "madvise"},
	{219, "madvise1"},
	{220, "getdents64"},
	{221, "fcntl64"},
	{224, "gettid"},
	{225, "readahead"},
	{226, "setxattr"},
	{227, "lsetxattr"},
	{228, "fsetxattr"},
	{229, "getxattr"},
	{230, "lgetxattr"},
	{231, "fgetxattr"},
	{232, "listxattr"},
	{233, "llistxattr"},
	{234, "flistxattr"},
	{235, "removexattr"},
	{236, "lremovexattr"},
	{237, "fremovexattr"},
	{238, "tkill"},
	{239, "sendfile64"},
	{240, "futex"},
	{241, "sched_setaffinity"},
	{242, "sched_getaffinity"},
	{243, "set_thread_area"},
	{244, "get_thread_area"},
	{245, "io_setup"},
	{246, "io_destroy"},
	{247, "io_getevents"},
	{248, "io_submit"},
	{249, "io_cancel"},
	{250, "fadvise64"},
	{252, "exit_group"},
	{253, "lookup_dcookie"},
	{254, "epoll_create"},
	{255, "epoll_ctl"},
	{256, "epoll_wait"},
	{257, "remap_file_pages"},
	{258, "set_tid_address"},
	{259, "timer_create"},
	{260, "timer_settime"},
	{261, "timer_gettime"},
	{262, "timer_getoverrun"},
	{263, "timer_delete"},
	{264, "clock_settime"},
	{265, "clock_gettime"},
	{266, "clock_getres"},
	{267, "clock_nanosleep"},
	{268, "statfs64"},
	{269, "fstatfs64"},
	{270, "tgkill"},
	{271, "utimes"},
	{272, "fadvise64_64"},
	{273, "vserver"},
	{274, "mbind"},
	{275, "get_mempolicy"},
	{276, "set_mempolicy"},
	{277, "mq_open"},
	{278, "mq_unlink"},
	{279, "mq_timedsend"},
	{280, "mq_timedreceive"},
	{281, "mq_notify"},
	{282, "mq_getsetattr"},
	{283, "sys_kexec_load"},
	{284, "waitid"},
	{286, "add_key"},
	{287, "request_key"},
	{288, "keyctl"},
	{289, "ioprio_set"},
	{290, "ioprio_get"},
	{291, "inotify_init"},
	{292, "inotify_add_watch"},
	{293, "inotify_rm_watch"},
	{294, "migrate_pages"},
	{295, "openat"},
	{296, "mkdirat"},
	{297, "mknodat"},
	{298, "fchownat"},
	{299, "futimesat"},
	{300, "fstatat64"},
	{301, "unlinkat"},
	{302, "renameat"},
	{303, "linkat"},
	{304, "symlinkat"},
	{305, "readlinkat"},
	{306, "fchmodat"},
	{307, "faccessat"},
	{308, "pselect6"},
	{309, "ppoll"},
	{310, "unshare"},
	{311, "set_robust_list"},
	{312, "get_robust_list"},
	{313, "splice"},
	{314, "sync_file_range"},
	{315, "tee"},
	{316, "vmsplice"},
	{317, "move_pages"},
	{318, "getcpu"},
	{319, "epoll_pwait"},
	{320, "utimensat"},
	{321, "signalfd"},
	{322, "timerfd"},
	{323, "eventfd"},
	{324, "fallocate"},
	{325, "timerfd_settime"},
	{326, "timerfd_gettime"},
	{327, "signalfd4"},
	{328, "eventfd2"},
	{329, "epoll_create1"},
	{330, "dup3"},
	{331, "pipe2"},
	{332, "inotify_init1"},
	{333, "preadv"},
	{334, "pwritev"},
	{335, "rt_tgsigqueueinfo"},
	{336, "perf_event_open"},
	{337, "recvmmsg"},
	{338, "fanotify_init"},
	{339, "fanotify_mark"},
	{340, "prlimit64"},
	{341, "name_to_handle_at"},
	{342, "open_by_handle_at"},
	{343, "clock_adjtime"},
	{344, "syncfs"},
	{345, "sendmmsg"},
	{346, "setns"},
	{347, "process_vm_readv"},
	{348, "process_vm_writev"},
	{349, "kcmp"},
	{350, "finit_module"},
	{351, "sched_setattr"},
	{352, "sched_getattr"},
	{353, "renameat2"},
	{354, "seccomp"},
	{355, "getrandom"},
	{356, "memfd_create"},
	{357, "bpf"},
	{358, "execveat"},
	{359, "socket"},
	{360, "socketpair"},
	{361, "bind"},
	{362, "connect"},
	{363, "listen"},
	{364, "accept4"},
	{365, "getsockopt"},
	{366, "setsockopt"},
	{367, "getsockname"},
	{368, "getpeername"},
	{369, "sendto"},
	{370, "sendmsg"},
	{371, "recvfrom"},
	{372, "recvmsg"},
	{373, "shutdown"},
	{374, "userfaultfd"},
	{375, "membarrier"},
	{376, "mlock2"},
	{377, "copy_file_range"},
	{378, "preadv2"},
	{379, "pwritev2"},
	{380, "pkey_mprotect"},
	{381, "pkey_alloc"},
	{382, "pkey_free"},
	{383, "statx"},
};

std::vector<std::pair<unsigned int,std::string>> s_86_64_syscall_name_to_num = {
	{0, "read"},
	{1, "write"},
	{2, "open"},
	{3, "close"},
	{4, "stat"},
	{5, "fstat"},
	{6, "lstat"},
	{7, "poll"},
	{8, "lseek"},
	{9, "mmap"},
	{10, "mprotect"},
	{11, "munmap"},
	{12, "brk"},
	{13, "rt_sigaction"},
	{14, "rt_sigprocmask"},
	{15, "rt_sigreturn"},
	{16, "ioctl"},
	{17, "pread"},
	{18, "pwrite"},
	{19, "readv"},
	{20, "writev"},
	{21, "access"},
	{22, "pipe"},
	{23, "select"},
	{24, "sched_yield"},
	{25, "mremap"},
	{26, "msync"},
	{27, "mincore"},
	{28, "madvise"},
	{29, "shmget"},
	{30, "shmat"},
	{31, "shmctl"},
	{32, "dup"},
	{33, "dup2"},
	{34, "pause"},
	{35, "nanosleep"},
	{36, "getitimer"},
	{37, "alarm"},
	{38, "setitimer"},
	{39, "getpid"},
	{40, "sendfile"},
	{41, "socket"},
	{42, "connect"},
	{43, "accept"},
	{44, "sendto"},
	{45, "recvfrom"},
	{46, "sendmsg"},
	{47, "recvmsg"},
	{48, "shutdown"},
	{49, "bind"},
	{50, "listen"},
	{51, "getsockname"},
	{52, "getpeername"},
	{53, "socketpair"},
	{54, "setsockopt"},
	{55, "getsockopt"},
	{56, "clone"},
	{57, "fork"},
	{58, "vfork"},
	{59, "execve"},
	{60, "exit"},
	{61, "wait4"},
	{62, "kill"},
	{63, "uname"},
	{64, "semget"},
	{65, "semop"},
	{66, "semctl"},
	{67, "shmdt"},
	{68, "msgget"},
	{69, "msgsnd"},
	{70, "msgrcv"},
	{71, "msgctl"},
	{72, "fcntl"},
	{73, "flock"},
	{74, "fsync"},
	{75, "fdatasync"},
	{76, "truncate"},
	{77, "ftruncate"},
	{78, "getdents"},
	{79, "getcwd"},
	{80, "chdir"},
	{81, "fchdir"},
	{82, "rename"},
	{83, "mkdir"},
	{84, "rmdir"},
	{85, "creat"},
	{86, "link"},
	{87, "unlink"},
	{88, "symlink"},
	{89, "readlink"},
	{90, "chmod"},
	{91, "fchmod"},
	{92, "chown"},
	{93, "fchown"},
	{94, "lchown"},
	{95, "umask"},
	{96, "gettimeofday"},
	{97, "getrlimit"},
	{98, "getrusage"},
	{99, "sysinfo"},
	{100, "times"},
	{101, "ptrace"},
	{102, "getuid"},
	{103, "syslog"},
	{104, "getgid"},
	{105, "setuid"},
	{106, "setgid"},
	{107, "geteuid"},
	{108, "getegid"},
	{109, "setpgid"},
	{110, "getppid"},
	{111, "getpgrp"},
	{112, "setsid"},
	{113, "setreuid"},
	{114, "setregid"},
	{115, "getgroups"},
	{116, "setgroups"},
	{117, "setresuid"},
	{118, "getresuid"},
	{119, "setresgid"},
	{120, "getresgid"},
	{121, "getpgid"},
	{122, "setfsuid"},
	{123, "setfsgid"},
	{124, "getsid"},
	{125, "capget"},
	{126, "capset"},
	{127, "rt_sigpending"},
	{128, "rt_sigtimedwait"},
	{129, "rt_sigqueueinfo"},
	{130, "rt_sigsuspend"},
	{131, "sigaltstack"},
	{132, "utime"},
	{133, "mknod"},
	{134, "uselib"},
	{135, "personality"},
	{136, "ustat"},
	{137, "statfs"},
	{138, "fstatfs"},
	{139, "sysfs"},
	{140, "getpriority"},
	{141, "setpriority"},
	{142, "sched_setparam"},
	{143, "sched_getparam"},
	{144, "sched_setscheduler"},
	{145, "sched_getscheduler"},
	{146, "sched_get_priority_max"},
	{147, "sched_get_priority_min"},
	{148, "sched_rr_get_interval"},
	{149, "mlock"},
	{150, "munlock"},
	{151, "mlockall"},
	{152, "munlockall"},
	{153, "vhangup"},
	{154, "modify_ldt"},
	{155, "pivot_root"},
	{156, "_sysctl"},
	{157, "prctl"},
	{158, "arch_prctl"},
	{159, "adjtimex"},
	{160, "setrlimit"},
	{161, "chroot"},
	{162, "sync"},
	{163, "acct"},
	{164, "settimeofday"},
	{165, "mount"},
	{166, "umount2"},
	{167, "swapon"},
	{168, "swapoff"},
	{169, "reboot"},
	{170, "sethostname"},
	{171, "setdomainname"},
	{172, "iopl"},
	{173, "ioperm"},
	{174, "create_module"},
	{175, "init_module"},
	{176, "delete_module"},
	{177, "get_kernel_syms"},
	{178, "query_module"},
	{179, "quotactl"},
	{180, "nfsservctl"},
	{181, "getpmsg"},
	{182, "putpmsg"},
	{183, "afs_syscall"},
	{184, "tuxcall"},
	{185, "security"},
	{186, "gettid"},
	{187, "readahead"},
	{188, "setxattr"},
	{189, "lsetxattr"},
	{190, "fsetxattr"},
	{191, "getxattr"},
	{192, "lgetxattr"},
	{193, "fgetxattr"},
	{194, "listxattr"},
	{195, "llistxattr"},
	{196, "flistxattr"},
	{197, "removexattr"},
	{198, "lremovexattr"},
	{199, "fremovexattr"},
	{200, "tkill"},
	{201, "time"},
	{202, "futex"},
	{203, "sched_setaffinity"},
	{204, "sched_getaffinity"},
	{205, "set_thread_area"},
	{206, "io_setup"},
	{207, "io_destroy"},
	{208, "io_getevents"},
	{209, "io_submit"},
	{210, "io_cancel"},
	{211, "get_thread_area"},
	{212, "lookup_dcookie"},
	{213, "epoll_create"},
	{214, "epoll_ctl_old"},
	{215, "epoll_wait_old"},
	{216, "remap_file_pages"},
	{217, "getdents64"},
	{218, "set_tid_address"},
	{219, "restart_syscall"},
	{220, "semtimedop"},
	{221, "fadvise64"},
	{222, "timer_create"},
	{223, "timer_settime"},
	{224, "timer_gettime"},
	{225, "timer_getoverrun"},
	{226, "timer_delete"},
	{227, "clock_settime"},
	{228, "clock_gettime"},
	{229, "clock_getres"},
	{230, "clock_nanosleep"},
	{231, "exit_group"},
	{232, "epoll_wait"},
	{233, "epoll_ctl"},
	{234, "tgkill"},
	{235, "utimes"},
	{236, "vserver"},
	{237, "mbind"},
	{238, "set_mempolicy"},
	{239, "get_mempolicy"},
	{240, "mq_open"},
	{241, "mq_unlink"},
	{242, "mq_timedsend"},
	{243, "mq_timedreceive"},
	{244, "mq_notify"},
	{245, "mq_getsetattr"},
	{246, "kexec_load"},
	{247, "waitid"},
	{248, "add_key"},
	{249, "request_key"},
	{250, "keyctl"},
	{251, "ioprio_set"},
	{252, "ioprio_get"},
	{253, "inotify_init"},
	{254, "inotify_add_watch"},
	{255, "inotify_rm_watch"},
	{256, "migrate_pages"},
	{257, "openat"},
	{258, "mkdirat"},
	{259, "mknodat"},
	{260, "fchownat"},
	{261, "futimesat"},
	{262, "newfstatat"},
	{263, "unlinkat"},
	{264, "renameat"},
	{265, "linkat"},
	{266, "symlinkat"},
	{267, "readlinkat"},
	{268, "fchmodat"},
	{269, "faccessat"},
	{270, "pselect6"},
	{271, "ppoll"},
	{272, "unshare"},
	{273, "set_robust_list"},
	{274, "get_robust_list"},
	{275, "splice"},
	{276, "tee"},
	{277, "sync_file_range"},
	{278, "vmsplice"},
	{279, "move_pages"},
	{280, "utimensat"},
	{281, "epoll_pwait"},
	{282, "signalfd"},
	{283, "timerfd"},
	{284, "eventfd"},
	{285, "fallocate"},
	{286, "timerfd_settime"},
	{287, "timerfd_gettime"},
	{288, "accept4"},
	{289, "signalfd4"},
	{290, "eventfd2"},
	{291, "epoll_create1"},
	{292, "dup3"},
	{293, "pipe2"},
	{294, "inotify_init1"},
	{295, "preadv"},
	{296, "pwritev"},
	{297, "rt_tgsigqueueinfo"},
	{298, "perf_event_open"},
	{299, "recvmmsg"},
	{300, "fanotify_init"},
	{301, "fanotify_mark"},
	{302, "prlimit64"},
	{303, "name_to_handle_at"},
	{304, "open_by_handle_at"},
	{305, "clock_adjtime"},
	{306, "syncfs"},
	{307, "sendmmsg"},
	{308, "setns"},
	{309, "getcpu"},
	{310, "process_vm_readv"},
	{311, "process_vm_writev"},
	{312, "kcmp"},
	{313, "finit_module"},
	{314, "sched_setattr"},
	{315, "sched_getattr"},
	{316, "renameat2"},
	{317, "seccomp"},
	{318, "getrandom"},
	{319, "memfd_create"},
	{320, "kexec_file_load"},
	{321, "bpf"},
	{322, "execveat"},
	{323, "userfaultfd"},
	{324, "membarrier"},
	{325, "mlock2"},
	{326, "copy_file_range"},
	{327, "preadv2"},
	{328, "pwritev2"},
	{329, "pkey_mprotect"},
	{330, "pkey_alloc"},
	{331, "pkey_free"},
	{332, "statx"},
};

void LookupTables::Initialize() {
	for (auto rec: s_record_type_name_to_code) {
		s_record_type_code_to_name[static_cast<int>(rec.second)] = rec.first;
	}
	for (int i = 0; i < s_record_type_code_to_name.size(); i++) {
		if (s_record_type_code_to_name[i].empty()) {
			s_record_type_code_to_name[i] = "UNKNOWN[" + std::to_string(i) + "]";
		}
	}

	s_syscall_lookup.resize(2);
	{
		auto vec = s_syscall_lookup[0];
		vec.resize(s_i386_syscall_name_to_num.back().first+1);
		for (auto &e: s_i386_syscall_name_to_num) {
			vec[e.first] = e.second;
		}
	}
	{
		auto vec = s_syscall_lookup[1];
		vec.resize(s_86_64_syscall_name_to_num.back().first+1);
		for (auto &e: s_86_64_syscall_name_to_num) {
			vec[e.first] = e.second;
		}
	}
}

field_type_t LookupTables::FieldNameToType(RecordType rtype, const std::string_view& name, const std::string_view& val) {
	field_type_t ftype = field_type_t::UNKNOWN;
	switch (rtype) {
		case RecordType::EXECVE:
			if (name[0] == 'a' && name.compare(0, 4, "argc") != 0 && name.compare(name.size()-4, 4, "_len") != 0) {
				ftype = field_type_t::ESCAPED;
			}
			break;
		case RecordType::AVC:
			if (name == "saddr") {
				ftype = field_type_t::UNCLASSIFIED;
			}
			break;
		case RecordType::USER_TTY:
			if (name == "msg") {
				ftype = field_type_t::ESCAPED;
			}
			break;
		case RecordType::NETFILTER_PKT:
			if (name == "saddr") {
				ftype = field_type_t::ADDR;
			}
			break;
		case RecordType::PATH:
			if (name == "flags") {
				ftype = field_type_t::FLAGS;
			}
			break;
		case RecordType::MQ_OPEN:
			if (name == "mode") {
				ftype = field_type_t::MODE_SHORT;
			}
			break;
		case RecordType::CRYPTO_KEY_USER:
			if (name == "fp") {
				ftype = field_type_t::UNCLASSIFIED;
			}
			break;
		case RecordType::ADD_GROUP:
			// fallthrough
		case RecordType::GRP_MGMT:
			// fallthrough
		case RecordType::DEL_GROUP:
			if (name == "id") {
				ftype = field_type_t::GID;
			}
			break;
		default:
			if (name == "acct") {
				if (val[0] == '"' || std::all_of(val.begin(), val.end(), [](unsigned char c) { return std::isxdigit(c); })) {
					ftype = field_type_t::ESCAPED;
				} else {
					ftype = field_type_t::UNCLASSIFIED;
				}
			}
			break;
	}

	if (ftype == field_type_t::UNKNOWN) {
		ftype = FieldNameToType(std::string(name));
	}

	return ftype;
}

MachineType LookupTables::ArchToMachine(const std::string_view& arch) {
	if (arch.empty()) {
		return MachineType::UNKNOWN;
	}

	auto arch_name = std::string(arch);
	std::transform(arch_name.begin(), arch_name.end(), arch_name.begin(), [](unsigned char c) { return std::tolower(c); });

	ArchType arch_type = ArchType::UNKNOWN;
	// Try decoding arch as a number (e.g. 0x40000003)
	try {
		arch_type = static_cast<ArchType>(std::stoul(arch_name, nullptr, 0));
		switch (arch_type) {
			case ArchType::I386:
				// fallthrough
			case ArchType::X86_64:
				break;
			default:
				return MachineType::UNKNOWN;
		}
	} catch (std::invalid_argument&) {
		// Ignore
	} catch (std::out_of_range&) {
		// Ignore
	}

	if (arch_type == ArchType::UNKNOWN) {
		auto itr = s_arch_name_to_type.find(arch_name);
		if (itr == s_arch_name_to_type.end()) {
			return MachineType::UNKNOWN;
		}
		arch_type = itr->second;
	}

	switch (arch_type) {
		case ArchType::I386:
			return MachineType::X86;
		case ArchType::X86_64:
			return MachineType::X86_64;
		default:
			return MachineType::UNKNOWN;
	}
}

std::string LookupTables::SyscallToName(MachineType mtype, int syscall, int a0) {
	auto idx = static_cast<size_t>(mtype);
	try {
		auto& syscall_lookup = s_syscall_lookup.at(idx);
		return syscall_lookup.at(syscall);
	} catch (std::out_of_range&) {
		return "unknown-syscall(" + std::to_string(syscall) + ")";
	}
}

std::string LookupTables::MachineToName(MachineType mt) {
    try {
        return s_machine_to_name.at(static_cast<int>(mt));
    } catch (std::out_of_range&) {
        return "unknown-machine(" + std::to_string(static_cast<int>(mt)) + ")";
    }
}
